generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())

  username String @unique
  password String

  role   String
  avatar String? @default("")

  questions Question[]

  Competitor Competitor?

  // ha zsuri
  competitions Competition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id String @id @default(uuid())

  year  Int // évfolyam
  class String // osztály

  name        String @unique
  description String

  // csak 3 versenyző lehet egy csapatban
  competitors Competitor[]

  // egyszerre csak egy verseny
  competition   Competition? @relation(fields: [competitionId], references: [id])
  competitionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competitor {
  id String @id @default(uuid())

  year  Int // évfolyam
  class String // osztály

  // csak egy csapatba tartozhat
  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?

  // csak egy felhasználóhoz tartozhat
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  attempts Attempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competition {
  id String @id @default(uuid())

  name        String @unique
  description String

  // 4 különböző évfolyam
  year String

  image_url String @default("")

  startDate DateTime
  endDate   DateTime

  questions1 String[]
  questions2 String[]
  questions3 String[]

  // zsurik
  jurys User[]

  teams    Team[]
  attempts Attempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id String @id @default(uuid())

  question String
  // syntax: word1 word2 word3 word4 6 
  // (4 szó, utolsó szám évfolyam)

  attempts Attempt[]

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attempt {
  id String @id @default(uuid())

  competitor   Competitor @relation(fields: [competitorId], references: [id])
  competitorId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  isCorrect Boolean
  TimeTaken Int

  answer String

  Competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteInfo {
  id String @id @default(uuid())

  htmlText String @default("")

  websiteName        String @default("")
  websiteDescription String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
